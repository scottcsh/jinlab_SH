#!/bin/sh

echo;
echo "[ Cryo-EM data handling programs ]"
echo "           Jin Lab, GIST"
echo;
echo "Last update: 2022/03/07"
echo;
echo "Select program"
echo;
echo "1. Rename / rename and numerically order filenames: *.mrc -> ####_Nametag.mrcs"
echo;
echo "2. OpticsGroupName / add OpticsGroupName in *.star files"
echo;
echo "3. FSC estimation"

printf "Select : "
read prgm


case "$prgm" in

#///////////////////////////////////////////// Rename ////////////////////////////////////////////////////////

	"1") 



echo;
echo "-----------------------------------------------------"
echo "|                    Rename mrcs                    |"
echo "-----------------------------------------------------"
echo "* means any filename, ##### means ordered filenames -> expected output is 00001.mrc, 00002.mrc, ......"
echo "Nametag input sample(KARA) -> expected output(00001_KARA.mrc)"
echo;

echo "1. *.mrc  ----->  #####_Nametag.mrc"
echo;
echo "2. *.mrc  ----->  #####_Nametag.mrcs"
echo;
echo "3. *.mrcs ----->  #####_Nametag.mrcs"
echo;
echo "4. *.tiff ----->  #####_Nametag.tiff"
echo;

printf "Select : "
read Selection

printf "Nametag : "
read Nametag

a=1

case "$Selection" in

	"1")

	printf "Your selection is *.mrc  ----->  #####_%s.mrc / IS IT CORRECT? (y/n)" "$Nametag"
	read correct
	if [ $correct=="y" ]
	then
		for i in *.mrc; do

        		new=$(printf "%05d_%s.mrc" "$a" "$Nametag")
    			mv -- "$i" "$new"
        		let a=a+1

		done
	fi
	;;


	"2")

        printf "Your selection is *.mrc  ----->  #####_%s.mrcs / IS IT CORRECT? (y/n)" "$Nametag"
        read correct
        if [ $correct=="y" ]
	then

                for i in *.mrc; do

                        new=$(printf "%05d_%s.mrcs" "$a" "$Nametag")
                        mv -- "$i" "$new"
                        let a=a+1

                done
        
	fi
        ;;

	"3")

        printf "Your selection is *.mrcs  ----->  #####_%s.mrcs / IS IT CORRECT? (y/n)" "$Nametag"
        read correct
        if [ $correct=="y" ]
	then
                for i in *.mrcs; do

                        new=$(printf "%05d_%s.mrcs" "$a" "$Nametag")
                        mv -- "$i" "$new"
                        let a=a+1

                done
	
        fi
        ;;

	"4")
 
         printf "Your selection is *.tiff  ----->  #####_%s.tiff / IS IT CORRECT? (y/n)" "$Nametag"
         read correct
         if [ $correct=="y" ]
     then
                 for i in *.tiff; do
 
                         new=$(printf "%05d_%s.tiff" "$a" "$Nametag")
                         mv -- "$i" "$new"
                         let a=a+1
 
                 done
 
         fi
         ;;

	*) exit 0
esac


;;

#///////////////////////////////// End of Rename ///////////////////////////////////////////////


#////////////////////////////////OpticsGroupName //////////////////////////////////////////////////

	"2")

echo;
echo "-----------------------------------------------------"
echo "|               Insert OpticsGroupName              |"
echo "-----------------------------------------------------"
echo;

printf "*.star file location (/dir1/dir2/input.star): "
read starloc
echo;

printf "Insert OpticsGroupName from line (usually line 46): "
read linestart
echo;

printf "Value for the OpticsGroupName is: "
read opticsgroup
echo;

printf "Output *.star file destination (/dir1/dir2/ouput.star): "
read outloc
echo;

echo;
echo "*.star file locatation: $starloc"
echo "Insert OpticsGroupName of $opticsgroup from line $linestart"
echo "Save as $outloc"
echo;
printf "IS IT CORRECT? (y/n) "
read correct

	if [ $correct=="y" ]
   	then

	echo;

	(vim -c "$linestart,$ s/$/ $opticsgroup" -c "w! $outloc" -c q! $starloc)
	
	echo "Don't forget to add \"_rlnOpticsGroup #22\" after \"_rlnClassNumber #21\" in your *.star file! (usually line 46)"

	fi


;;


#////////////////////////////////FSC//////////////////////////////////////////////////
	"3")

echo;
echo "-----------------------------------------------------"
echo "|                   FSC estimation                  |"
echo "-----------------------------------------------------"
echo;

echo "Requirements: half1_unfil.mrc, half2_unfil.mrc, model_shaken2.pdb"

printf "B factor (witout -): "
read bfactor
echo;

printf "Resolution: "
read res
echo;

printf "Pixel size: "
read angpix
echo;

printf "Box size: "
read boxsize
echo;

echo "estimating FSC..."

PATH=$PATH:/opt/relion/build/bin/
PATH=$PATH:/opt/EMAN2/bin/
PATH=$PATH:/opt/phenix-1.18.2-3874/build/bin/

(relion_image_handler --i half1_unfil.mrc --o whole_unfil.mrc --add half2_unfil.mrc)

(relion_image_handler --i half1_unfil.mrc --o half1_sharpen.mrc --bfactor -$bfactor --lowpass $res --angpix $angpix)
(relion_image_handler --i half2_unfil.mrc --o half2_sharpen.mrc --bfactor -$bfactor --lowpass $res --angpix $angpix)
(relion_image_handler --i whole_unfil.mrc --o whole_sharpen.mrc --bfactor -$bfactor --lowpass $res --angpix $angpix)

(phenix.real_space_refine ./model_shaken2.pdb ./half1_sharpen.mrc ./na.pdb_ss.eff resolution=$res target_bonds_rmsd=0.005 target_angles_rmsd=0.5 secondary_structure.enabled=True ncs_constraints=False |tee half1_refine.log)
(mv model_shaken2_real_space_refined.pdb half1_shaken2_refine.pdb)
(phenix.real_space_refine ./model_shaken2.pdb ./half2_sharpen.mrc ./na.pdb_ss.eff resolution=$res target_bonds_rmsd=0.005 target_angles_rmsd=0.5 secondary_structure.enabled=True ncs_constraints=False |tee half2_refine.log)
(mv model_shaken2_real_space_refined.pdb half2_shaken2_refine.pdb)
(phenix.real_space_refine ./model_shaken2.pdb ./whole_sharpen.mrc ./na.pdb_ss.eff resolution=$res target_bonds_rmsd=0.005 target_angles_rmsd=0.5 secondary_structure.enabled=True ncs_constraints=False |tee whole_refine.log)
(mv model_shaken2_real_space_refined.pdb whole_shaken2_refine.pdb)

(e2pdb2mrc.py half1_shaken2_refine.pdb half1_shaken2_refine.mrc --apix=$angpix --res=$res --box=$boxsize,$boxsize,$boxsize)
(e2pdb2mrc.py half2_shaken2_refine.pdb half2_shaken2_refine.mrc --apix=$angpix --res=$res --box=$boxsize,$boxsize,$boxsize)
(e2pdb2mrc.py whole_shaken2_refine.pdb whole_shaken2_refine.mrc --apix=$angpix --res=$res --box=$boxsize,$boxsize,$boxsize)

printf "Type (complete) after centering *_shaken2_refine.mrc to whole_sharpen.mrc on chimera."
echo;
printf "Required: half1_shaken2_refine_center.mrc, half2_shaken2_refine_center.mrc, whole_shaken2_refine_center.mrc"
echo;

com=""

while [ $com!="complete" ]
do
	read com

	echo;
	
	if [ $com == "complete" ]
	then
		break
	fi

	
done

(relion_mask_create --i half1_shaken2_refine_center.mrc --o half1_shaken2_refine_center_mask.mrc --ini_threshold 1 --extend_inimask 4 --width_soft_edge 8)
(relion_mask_create --i half2_shaken2_refine_center.mrc --o half2_shaken2_refine_center_mask.mrc --ini_threshold 1 --extend_inimask 4 --width_soft_edge 8)
(relion_mask_create --i whole_shaken2_refine_center.mrc --o whole_shaken2_refine_center_mask.mrc --ini_threshold 1 --extend_inimask 4 --width_soft_edge 8)

(relion_image_handler --i half1_unfil.mrc --o original_half1_mask.mrc --multiply half1_shaken2_refine_center_mask.mrc)
(relion_image_handler --i half2_unfil.mrc --o original_half2_mask.mrc --multiply half2_shaken2_refine_center_mask.mrc)
(relion_image_handler --i whole_unfil.mrc --o original_whole_mask.mrc --multiply whole_shaken2_refine_center_mask.mrc)

(relion_image_handler --i original_half1_mask.mrc --o half1_fsc --fsc half1_shaken2_refine_center.mrc > half1_fsc.txt)
(relion_image_handler --i original_half2_mask.mrc --o half2_fsc --fsc half2_shaken2_refine_center.mrc > half2_fsc.txt)
(relion_image_handler --i original_whole_mask.mrc --o whole_fsc --fsc whole_shaken2_refine_center.mrc > whole_fsc.txt)

;;
	*) exit 0

esac

echo "Complete."

exit 0
